import { 
connect } from 'react-redux';

import {
addNewFormField,
deleteFormField,
saveFormField,
setSelectedFormField,
loadFormFieldsByQuestionId,
loadFormFieldsByFormFieldId,
loadFormFields } from 'services/course/actions/formfields';

import {
addNewFormFieldAnswer,
deleteFormFieldAnswer,
saveFormFieldAnswer,
saveFormFieldAnswerByFieldId,
saveStudentsAnswerPoints,
loadFormFieldAnswersByQuestionId,
loadFormFieldAnswersByFormFieldId,
loadFormFieldAnswers } from 'services/course/actions/formfieldanswers';

import {
addNewFormFieldPoint,
deleteFormFieldPoints,
saveFormFieldPoint,
saveFormFieldPointsByFieldId,
loadFormFieldPoints } from 'services/course/actions/formquestionpoints';

import {
inputType } from 'services/course/pages/QuestionsPage/helpers';

import { 
useUserVerificationHook } from 'services/course/helpers/Hooks/useUserVerificationHook';

import { 
useOnLoadingHook } from 'services/course/helpers/Hooks/useOnLoadingHook';

import {
getStyles } from 'services/course/pages/FormBuilder/helpers';

import {
manageFormFieldCollection } from 'services/course/pages/FormBuilder/helpers/formFieldHelpers';

import {
addGroupedFormFieldsConfig  } from 'services/course/pages/FormBuilder/FormFields/helpers';

import {
elementMeta } from 'services/course/pages/QuestionsPage/helpers';

import { 
saveEditorMarkDownObjectToMw } from 'services/course/actions/editor';

import {
setDraggableFormFields } from 'services/course/actions/draggableFormFields';

import {
loadOnlineQuestionsByQuestionId } from 'services/course/actions/onlinequestions';

import MissedQuestionComponent from 'services/course/pages/FormBuilder/FormQuestions/components/MissedQuestionsComponent';
import MiniSideBarMenu from 'services/course/pages/components/SubscriptionComponent/MiniSideBarMenu';
import MiniSideBarButton from 'services/course/pages/components/SubscriptionComponent/MiniSideBarButton';
import Basic from 'services/course/pages/components/SubscriptionComponent/MiniSideBarMenu/helper/formTypeSelector/Basic'; 
import Latex from "react-latex";
import useFormFieldHook from 'services/course/pages/FormBuilder/hooks/useFormFieldHook';
import useDraggableListItemComponentHook from 'services/course/pages/FormBuilder/hooks/useDraggableListItemComponentHook';
import CheckBox from 'services/course/pages/FormBuilder/FormFields/component/CheckBox';
import CheckBoxTest from 'services/course/pages/FormBuilder/FormFields/component/CheckBoxTest';
import RadioButtonTest from 'services/course/pages/FormBuilder/FormFields/component/RadioButtonTest';
import DropDown from 'services/course/pages/FormBuilder/FormFields/component/DropDown';
import DataObjectSelector from 'services/course/pages/FormBuilder/FormFields/component/DataObjectSelector';
import TextField from 'services/course/pages/FormBuilder/FormFields/component/TextField';
import TextLabel from 'services/course/pages/FormBuilder/FormFields/component/TextLabel';
import MaxWidthDialog from 'services/course/pages/components/MaxWidthDialog';
import DraggableListItemComponent from 'services/course/pages/components/DraggableListItemComponent';
import MenuItem from '@mui/material/MenuItem';
import DateComponent from 'services/course/pages/FormBuilder/FormFields/component/DateComponent';
import Numbers from 'services/course/pages/FormBuilder/FormFields/component/Numbers';
import NumberPosition from 'services/course/pages/FormBuilder/FormFields/component/NumberPosition';
import Time from 'services/course/pages/FormBuilder/FormFields/component/Time';
import Toggle from 'services/course/pages/FormBuilder/FormFields/component/Toggle';
import DateTime from 'services/course/pages/FormBuilder/FormFields/component/DateTime';
import NumberPercentage from 'services/course/pages/FormBuilder/FormFields/component/NumberPercentage';
import FileUploadField from 'services/course/pages/FormBuilder/FormFields/component/FileUploadField'; 
import RadioButtonAnswerComponent from 'services/course/pages/FormBuilder/FormFields/component/RadioButtonAnswerComponent';
import ExplainAnswerComponent from 'services/course/pages/FormBuilder/FormFields/component/ExplainAnswerComponent';
import CheckBoxAnswerComponent from 'services/course/pages/FormBuilder/FormFields/component/CheckBoxAnswerComponent';
import ToggleAnswerComponent from 'services/course/pages/FormBuilder/FormFields/component/ToggleAnswerComponent';
import DraggableEditorComponent from 'services/course/pages/FormBuilder/FormFields/component/DraggableEditorComponent';
import customInputComponent from 'services/course/pages/FormBuilder/FormFields/component/helpers/customInputComponent';
import controlledTextInputComponent from 'services/course/pages/FormBuilder/FormFields/component/helpers/controlledTextInputComponent';
import controlledNumberInputComponent from 'services/course/pages/FormBuilder/FormFields/component/helpers/controlledNumberInputComponent';
import controlledDateTimeInputComponent from 'services/course/pages/FormBuilder/FormFields/component/helpers/controlledDateTimeInputComponent';
import formFileUploadComponent from 'services/course/pages/FormBuilder/FormFields/component/helpers/formFileUploadComponent';
import formDataObjectSelector from 'services/course/pages/FormBuilder/FormFields/component/helpers/formDataObjectSelector';
import controlledDropDownComponent from 'services/course/pages/FormBuilder/FormFields/component/helpers/controlledDropDownComponent';
import formDraggableEditorComponent from 'services/course/pages/FormBuilder/FormFields/component/helpers/formDraggableEditorComponent';
import 'services/course/pages/FormBuilder/formStyles/quizz/style.css';
import 'services/course/pages/FormBuilder/formStyles/report/style.css';

const FormFields = ({ 
  operatorBusinessName,
  courseId,
  lessonId,
  previewMode,
  currentUser,
  selectedFormField,
  setDraggableFormFields,
  setSelectedFormField,
  addNewFormField,
  saveFormField,
  loadFormFields,
  loadFormFieldAnswersByQuestionId,
  loadFormFieldsByQuestionId,
  loadFormFieldsByFormFieldId,
  deleteFormField,
  addNewFormFieldAnswer,
  deleteFormFieldAnswer,
  saveFormFieldAnswer,
  saveFormFieldAnswerByFieldId,
  loadFormFieldAnswers,
  loadFormFieldAnswersByFormFieldId,
  addNewFormFieldPoint,
  formFieldAnswersError,
  deleteFormFieldPoints,
  saveFormFieldPoint,
  saveFormFieldPointsByFieldId,
  loadFormFieldPoints,
  loadOnlineQuestionsByQuestionId,
  fields,
  formFieldsLoading,
  onFormFieldsLoadingError, 
  formFieldAnswers,
  formQuestionPoints,
  formFieldAnswersLoading,
  onFormFieldAnswersLoadingError,
  form,
  saveEditorMarkDownObjectToMw,
  saveStudentsAnswerPoints,
  setUpdatePoints,
  draggableFormFields,
  draggableFormFiedList,
  draggableFormFiedAnswerList,
  modalProps,
  missedQuestions,
  saveInProgress,
  toggleSetPreviewMode,
  missedQuestionIds,
  leftUnAnsweredFormFields,
  leftUnAnsweredQuestions,
  unAnswerdQuestionIds,
  answerFieldId,
  answerFormType,
  answerFormName,
  answerFormUuId,
  answerFormUserId,
  children }) => {

  let {
    userId, 
    formUuId,
    formId,
    question,
    formType,
    formName,
    formBuilderState,
    formBuilderStatus,
    eventId } = form; 

  let fieldProps = { 
    selectedFormField,
    draggableFormFields,
    setDraggableFormFields,
    loadFormFields, 
    loadFormFieldAnswersByQuestionId,
    loadFormFieldsByQuestionId,
    loadFormFieldsByFormFieldId,
    addNewFormField, 
    saveFormField, 
    loadFormFieldsByFormFieldId, 
    deleteFormField,
    addNewFormFieldAnswer,
    formFieldAnswersError,
    deleteFormFieldAnswer,
    saveFormFieldAnswer,
    saveFormFieldAnswerByFieldId,
    loadFormFieldAnswers,
    loadFormFieldAnswersByFormFieldId,
    addNewFormFieldPoint,
    deleteFormFieldPoints,
    saveFormFieldPoint,
    saveFormFieldPointsByFieldId,
    loadFormFieldPoints,
    courseId, 
    lessonId,
    formId,
    formUuId,
    formType,
    formName,
    formBuilderState,
    formBuilderStatus,
    userId,
    currentUser,
    saveEditorMarkDownObjectToMw,
    fields,
    formFieldAnswers,
    formQuestionPoints,
    saveStudentsAnswerPoints,
    setUpdatePoints,
    previewMode,
    question,
    eventId };

  let {
    boundryRef, 
    formFields,
    moveInputField,
    handleEditor, 
    saveContentInterVal,
    setMoveInputField,
    isPreviewMode,
    handleRndPostioning,
    onhandleSelected,
    handleMarkDownEditorAnswers,
    handleMarkDownEditorAnswersPoints,
    handleFormFieldAnswers,
    handleSelectorFormFieldAnswers,
    handleHighlightingFormAnswers,
    handleDisplayingAnswerKeys,  
    handleDraggableFormFieldAnswers } = useFormFieldHook( fieldProps );  

  let {
    draggableListItemProps,
  } = useDraggableListItemComponentHook( fieldProps, handleDraggableFormFieldAnswers )
  
  useUserVerificationHook( currentUser, operatorBusinessName );

  useOnLoadingHook( formFieldsLoading, onFormFieldsLoadingError );

  useOnLoadingHook( formFieldAnswersLoading, onFormFieldAnswersLoadingError );

  let formFieldProps = { 
    ...fieldProps, 
    moveInputField,
    loadOnlineQuestionsByQuestionId, 
    setMoveInputField,
    handleMarkDownEditorAnswers,
    handleMarkDownEditorAnswersPoints,
    handleFormFieldAnswers, 
    handleSelectorFormFieldAnswers, 
    handleDraggableFormFieldAnswers,
    onhandleSelected,
    addGroupedFormFields, 
  };

  function addGroupedFormFields( element ){ 
    const yCoordinateIncrementValue = 150;
    addNewFormField( manageFormFieldCollection( addGroupedFormFieldsConfig( element, formUuId, currentUser, yCoordinateIncrementValue, formFields  ) ) );
  }
   
return (
      <div className={getStyles( formType )?.builder } style={{ 'backgroundColor': missedQuestions?.find(ans => ans?._id === question?._id) && ( formBuilderStatus === elementMeta.status.Reviewed || formBuilderStatus === elementMeta.status.Review )  ? "#C8FDC8" :"rgb(101, 245, 101)" }} ref={ boundryRef }>
      {   
          <div>
            { formDraggableEditorComponent( DraggableListItemComponent, DraggableEditorComponent, formFieldProps, draggableListItemProps, isPreviewMode, previewMode, setSelectedFormField  )() }
            {/* <DraggableListItemComponent 
              draggableListItemProps={ draggableListItemProps }
              fieldProps={ formFieldProps }
              selectedQuestion={ previewMode?.question }
            >
              {( item ) => 
              { return <div onClick={() => setSelectedFormField(item)}> 
                    <div className="item">
                     <h2>{`${item?._id}_${item?.position}_${item?.parentComponentId}_${item?.points}_userID:_${item?.userId}_selected:_${item?.selected}`}</h2>
                    </div>
                      <DraggableEditorComponent 
                        draggableListItemProps={ draggableListItemProps }
                        fieldProps={ formFieldProps }
                        selectedQuestion={ previewMode?.question }
                        previewMode={ isPreviewMode( item ) } 
                        formFieldElement={ item } 
                      />
                    </div>
                }
              }
            </DraggableListItemComponent>  */}
        </div> 
      }
      <div className="headerboundry"/>
      <div className="answerEditorBuilder">
      <div className="listItem">
   {/*  */}
      <ul className={'lessons'}>
        <MaxWidthDialog modalProps={modalProps}>
        {
          ( item ) => {
            return <MenuItem value={item}> { item } </MenuItem>
          }
        }
        </MaxWidthDialog> 
          { formFields?.map( element => (
              <div>
                <div>
                <li className={'lesson-item2'}  onClick={() => setSelectedFormField(element)}>
                <div className="question-card-top-right" /> 
                {  (element?.inputType === inputType.Text ) && controlledTextInputComponent(TextField, formFieldProps, moveInputField, handleHighlightingFormAnswers, handleDisplayingAnswerKeys, isPreviewMode, element, selectedFormField )() }
                {/* { (element?.inputType === inputType.Text) &&
                  <div className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'radio-move' : handleHighlightingFormAnswers( element )}>
                    <label className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'label-move' : ''}>   
                        <TextField 
                          fieldProps={formFieldProps}
                          previewMode={ isPreviewMode( element ) } 
                          formFieldElement={element} 
                        />
                        { !isPreviewMode( element ) &&  <span className="textfield">  { element?.inputValue } </span> }
                        { handleDisplayingAnswerKeys( element ) }
                    </label> 
                  </div>
                } */}
                {  (element?.inputType === inputType.TextLabel ) && controlledTextInputComponent(TextLabel, formFieldProps, moveInputField, handleHighlightingFormAnswers, handleDisplayingAnswerKeys, isPreviewMode, element, selectedFormField )() }
                {/* { (element?.inputType === inputType.TextLabel) &&
                  <div className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'radio-move' :  handleHighlightingFormAnswers( element )}>
                   <label className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'label-move' : ''}> 
                      <TextLabel 
                        fieldProps={formFieldProps}
                        previewMode={ isPreviewMode( element ) } 
                        formFieldElement={element} 
                      />
                    </label> 
                    { !isPreviewMode( element ) &&  <span className="textfield">  { element?.inputValue } </span> }  
                    { handleDisplayingAnswerKeys( element ) }
                  </div>
                } */}
                { ( element?.inputType === inputType.ExplanationAnswerEditor ) && customInputComponent(ExplainAnswerComponent, formFieldProps, previewMode, isPreviewMode, element, selectedFormField)() }
                {/* { (element?.inputType === inputType.ExplanationAnswerEditor) &&    
                    <div className='row row-margin'> 
                    <div className={`col ${ ( selectedFormField?._id === element?._id ) ? 'col-editor-selected' : 'col-editor' }`}>
                      <ExplainAnswerComponent 
                        fieldProps={ formFieldProps }
                        selectedQuestion={ previewMode?.question }
                        previewMode={ isPreviewMode( element ) } 
                        formFieldElement={ element } 
                      /> 
                    </div>      
                   </div> 
                } */}
                { ( element?.inputType === inputType.RadioButton ) && customInputComponent(RadioButtonAnswerComponent, formFieldProps, previewMode, isPreviewMode, element, selectedFormField)() }
                {/* { (element?.inputType === inputType.RadioButton) &&    
                    <div className='row row-margin'> 
                    <div className={`col ${ ( selectedFormField?._id === element?._id ) ? 'col-editor-selected' : 'col-editor' }`}>
                      <RadioButtonAnswerComponent 
                        fieldProps={ formFieldProps }
                        selectedQuestion={ previewMode?.question }
                        previewMode={ isPreviewMode( element ) } 
                        formFieldElement={ element } 
                      /> 
                    </div>      
                   </div> 
                } */}
                { ( element?.inputType === inputType.CheckBox ) && customInputComponent(CheckBoxAnswerComponent, formFieldProps, previewMode, isPreviewMode, element, selectedFormField)() }
                {/* { (element?.inputType === inputType.CheckBox) &&   
                    <div className='row row-margin'> 
                      <div className={`col ${ ( selectedFormField?._id === element?._id ) ? 'col-editor-selected' : 'col-editor' }`}>
                        <CheckBoxAnswerComponent 
                          fieldProps={ formFieldProps }
                          selectedQuestion={ previewMode?.question }
                          previewMode={ isPreviewMode( element ) } 
                          formFieldElement={ element } 
                        /> 
                      </div>      
                    </div>  
                } */}
                { ( element?.inputType === inputType.Toggle ) && customInputComponent(ToggleAnswerComponent, formFieldProps, previewMode, isPreviewMode, element, selectedFormField)() }
                {/* {(element?.inputType === inputType.Toggle ) &&    
                  <div className='row row-margin'> 
                    <div className={`col ${ ( selectedFormField?._id === element?._id ) ? 'col-editor-selected' : 'col-editor' }`}>
                     <ToggleAnswerComponent 
                        fieldProps={ formFieldProps }
                        selectedQuestion={ previewMode?.question }
                        previewMode={ isPreviewMode( element ) } 
                        formFieldElement={ element } 
                     /> 
                    </div>      
                  </div> 
                } */}
                { (element?.inputType === inputType.DropDown ) && controlledDropDownComponent(DropDown, formFieldProps, moveInputField, handleHighlightingFormAnswers, handleDisplayingAnswerKeys, isPreviewMode, element, selectedFormField )()} 
                {/* // { (element?.inputType === inputType.DropDown) &&  
                //  <div className='row row-margin'> 
                //  <div className="col col-margin-no-editor"> 
                //     <div className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'radio-move' : handleHighlightingFormAnswers( element )}>
                //       <label className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'label-move' : ''}> 
                //       <DropDown 
                //         fieldProps={formFieldProps}
                //         previewMode={ isPreviewMode( element ) }
                //         formFieldElement={element} 
                //         dropDownValues={ element?.dropDownOptions }
                //       />
                //       { handleDisplayingAnswerKeys( element ) }
                //       </label>
                //     </div>
                //   </div>
                //   </div>
                // } */}
                { (element?.inputType === inputType.FileUpload ) && formFileUploadComponent(FileUploadField, formFieldProps, moveInputField, handleHighlightingFormAnswers, handleDisplayingAnswerKeys, isPreviewMode, element, selectedFormField )() } 
                {/* { (element?.inputType === inputType?.FileUpload ) &&  
                    <div className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'radio-move' : handleHighlightingFormAnswers( element )}>
                     <label className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'label-move' : ''}> 
                      <FileUploadField 
                        fieldProps={formFieldProps}
                        previewMode={ isPreviewMode( element ) }
                        formFieldElement={element} 
                      />
                      </label>
                      { handleDisplayingAnswerKeys( element ) }
                    </div>
                }  */}
                { (element?.inputType === inputType.DataObjectSelector ) && formDataObjectSelector(DataObjectSelector, formFieldProps, moveInputField, handleHighlightingFormAnswers, handleDisplayingAnswerKeys, isPreviewMode, element, selectedFormField )() } 
                {/* { (element?.inputType === inputType?.DataObjectSelector ) &&  
                    <div className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'radio-move' : handleHighlightingFormAnswers( element )}>
                     <label className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'label-move' : ''}> 
                      <DataObjectSelector 
                        fieldProps={formFieldProps}
                        previewMode={ isPreviewMode( element ) }
                        formFieldElement={element} 
                        dropDownValues={ element?.dropDownOptions }
                      />
                      </label>
                      { handleDisplayingAnswerKeys( element ) }
                    </div>
                }  */}
                { (element?.inputType === inputType.Number ) && controlledNumberInputComponent(Numbers, formFieldProps, moveInputField, handleHighlightingFormAnswers, handleDisplayingAnswerKeys, isPreviewMode, element, selectedFormField )() }
                {/* { (element?.inputType === inputType.Number) &&
                    <div className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'radio-move' : handleHighlightingFormAnswers( element )}>    
                        <Numbers 
                          fieldProps={formFieldProps}
                          previewMode={ isPreviewMode( element ) } 
                          formFieldElement={element} 
                        />
                        { handleDisplayingAnswerKeys( element ) }
                        { isPreviewMode( element ) &&  <span> { element?.inputValue } </span> }
                    </div>
                } */}
                { (element?.inputType === inputType.NumberPercentage ) && controlledNumberInputComponent(NumberPercentage, formFieldProps, moveInputField, handleHighlightingFormAnswers, handleDisplayingAnswerKeys, isPreviewMode, element, selectedFormField )() }
                {/* { (element?.inputType === inputType.NumberPercentage) &&
                    <div className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'radio-move' : handleHighlightingFormAnswers( element )}>  
                        <NumberPercentage 
                          fieldProps={formFieldProps}
                          previewMode={ isPreviewMode( element ) } 
                          formFieldElement={element} 
                        />
                        { handleDisplayingAnswerKeys( element ) }
                        { isPreviewMode( element ) &&  <span> { element?.inputValue } </span> } 
                    </div>
                } */}
                { (element?.inputType === inputType.NumberPosition ) && controlledNumberInputComponent(NumberPosition, formFieldProps, moveInputField, handleHighlightingFormAnswers, handleDisplayingAnswerKeys, isPreviewMode, element, selectedFormField )() }
                {/* { (element?.inputType === inputType.NumberPosition) &&
                    <div className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'radio-move' : handleHighlightingFormAnswers( element )}>  
                        <NumberPosition 
                          fieldProps={formFieldProps}
                          previewMode={ isPreviewMode( element ) } 
                          formFieldElement={element} 
                        />
                        { handleDisplayingAnswerKeys( element ) }
                        { isPreviewMode( element ) &&  <span> { element?.inputValue } </span> }
                    </div>
                } */}
                { (element?.inputType === inputType.Date ) && controlledDateTimeInputComponent(DateComponent, formFieldProps, moveInputField, handleHighlightingFormAnswers, handleDisplayingAnswerKeys, isPreviewMode, element, selectedFormField )() } 
                {/* { (element?.inputType === inputType.Date) &&
                    <div className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'radio-move' : handleHighlightingFormAnswers( element )}>    
                      <label>
                        <Date 
                          fieldProps={formFieldProps}
                          previewMode={ isPreviewMode( element ) } 
                          formFieldElement={element} 
                        />
                        { handleDisplayingAnswerKeys( element ) }
                      </label>  
                    </div>
                } */}
                { (element?.inputType === inputType.Time ) && controlledDateTimeInputComponent(Time, formFieldProps, moveInputField, handleHighlightingFormAnswers, handleDisplayingAnswerKeys, isPreviewMode, element, selectedFormField )() } 
                {/* { (element?.inputType === inputType.Time) &&
                  <div className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'radio-move' : handleHighlightingFormAnswers( element )}>
                    <label className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'label-move' : ''}> 
                      <Time 
                        fieldProps={formFieldProps}
                        previewMode={ isPreviewMode( element ) } 
                        formFieldElement={element} 
                      />
                      { handleDisplayingAnswerKeys( element ) }
                      { !isPreviewMode( element ) &&  <span> { element?.inputValue } </span> } 
                    </label>  
                  </div>
               } */}
               { (element?.inputType === inputType.DateTime ) && controlledDateTimeInputComponent(DateTime, formFieldProps, moveInputField, handleHighlightingFormAnswers, handleDisplayingAnswerKeys, isPreviewMode, element, selectedFormField )() } 
               {/* { (element?.inputType === inputType.DateTime) &&
                 <div className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'radio-move' : handleHighlightingFormAnswers( element )}>
                  <label className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'label-move' : ''}> 
                    <DateTime 
                      fieldProps={formFieldProps}
                      previewMode={ isPreviewMode( element ) } 
                      formFieldElement={element} 
                    />
                     { handleDisplayingAnswerKeys( element ) }
                     { !isPreviewMode( element ) &&  <span> { element?.inputValue } </span> } 
                  </label>  
                </div>
              } */}
              {/* { (element?.inputType === inputType.Toggle) &&
                <div className={(moveInputField && (selectedFormField?._id === element?._id)) ? 'radio-move' : handleHighlightingFormAnswers( element )}>  
                  <>
                    <Toggle 
                      fieldProps={formFieldProps}
                      previewMode={ isPreviewMode( element ) } 
                      formFieldElement={element} 
                    />
                     { handleDisplayingAnswerKeys( element ) }
                  </>  
                </div>
              } */}
              </li>  
              </div>
              </div>   
            )) 
          }
          </ul>
          </div>
        </div>
      </div>  
      );
    };

    const mapDispatch = {
      setDraggableFormFields,
      addNewFormField,
      setSelectedFormField,
      saveFormField,
      loadFormFields,
      loadFormFieldAnswersByQuestionId,
      loadFormFieldsByQuestionId,
      loadFormFieldsByFormFieldId,
      deleteFormField,
      addNewFormFieldAnswer,
      deleteFormFieldAnswer,
      saveFormFieldAnswer,
      saveFormFieldAnswerByFieldId,
      loadFormFieldAnswersByFormFieldId,
      loadFormFieldAnswers,
      saveEditorMarkDownObjectToMw,
      addNewFormFieldPoint,
      deleteFormFieldPoints,
      saveFormFieldPoint,
      saveFormFieldPointsByFieldId,
      loadFormFieldPoints,
      saveStudentsAnswerPoints,
      loadOnlineQuestionsByQuestionId
    };
    
    const mapState = ( state, ownProps ) => { 
      return {
        currentUser: state.users.user,
        fields: Object.values( state?.formFields?.formFields ).filter( field => field?.questionId === ownProps?.form?.question?._id ),
        formFieldsLoading: state?.formFields?.formFieldsLoading,
        onFormFieldsLoadingError: state?.formFields?.onFormFieldsLoadingError,
        formFieldAnswers: Object.values( state?.formFieldAnswers?.formFieldAnswers ).filter( field => field?.questionId === ownProps?.form?.question?._id ),
        formFieldAnswersError: state?.formFieldAnswers?.onSaveError,
        formFieldAnswersLoading: state?.formFieldAnswers?.formFieldAnswersLoading,
        onFormFieldAnswersLoadingError: state?.formFieldAnswers?.onFormFieldAnswersLoadingError,
        formQuestionPoints: Object.values( state?.formFieldPoints?.formFieldPoints )?.filter( field => field?.questionId === ownProps?.form?.question?._id ),
        missedQuestions: state?.missedQuestions?.missedQuestions,
        missedQuestionIds: state?.missedQuestions?.missedQuestionIds,
        leftUnAnsweredFormFields: state?.missedQuestions?.leftUnAnsweredFormFields,
        leftUnAnsweredQuestions: state?.missedQuestions?.leftUnAnsweredQuestions,
        unAnswerdQuestionIds: state?.missedQuestions?.unAnswerdQuestionIds,
        answerFieldId: state?.missedQuestions?.answerFieldId,
        answerFormType:state?.missedQuestions?.answerFormType,
        answerFormName: state?.missedQuestions?.answerFormName,
        answerFormUuId: state?.missedQuestions?.answerFormUuId,
        answerFormUserId: state?.missedQuestions?.answerFormUserId,
        selectedFormField: state?.formFields?.selectedFormField,
        saveInProgress: state?.formFields?.saveInProgress,
        draggableFormFields: state?.draggableFormFields?.draggableFormFields
      };
    };
    
export default connect( mapState, mapDispatch )(FormFields);    