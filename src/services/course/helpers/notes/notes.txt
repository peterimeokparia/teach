Music - Wilson World - Youtube

 {/* <Typography sx={{  minWidth: 275, maxHeight:50, backgroundColor:'' }}variant="h4">{`${ displayName }`}</Typography> */}
 
Dante
--------

const content = this.editor.emitSerializedOutput();
this.uploadImagesAndFixUrls(content.blocks, html, id);

private async uploadImagesAndFixUrls(blocks: any[], html: string, postId: string): Promise<string> {
    let fixedHtml = html;

    for (const block of blocks) {
      if (block.type !== 'image') {
        continue;
      }

      const {url} = block.data;

      if (!url.startsWith('blob:')) {
        continue;
      }

      const blob = await fetch(url).then(r => r.blob());

      const uploadFormData = new FormData();
      uploadFormData.append('file', blob);

      const uploadRes = await fetch(`/post/${postId}/image`, {
        method: 'POST',
        body: uploadFormData,
      });

      switch (uploadRes.status) {
        case 200: // OK
          const {url: uploadedUrl} = await uploadRes.json();
          block.data.url = uploadedUrl;
          fixedHtml = fixedHtml.replace(url, uploadedUrl);
          break;
        case 500: // INTERNAL_SERVER_ERROR
          throw new Error();
      }
    }

    return fixedHtml;
  }
@kaloraat
 
Author
kaloraat commented on Sep 2, 2019
@ALEUT
With your code, I am able to do what was almost impossible :)
Thanks heaps!!!

@michelson
 
Owner
michelson commented on Sep 3, 2019
you can use the upload_handler option for the image block in order to override the entire upload behavior with your own logic

  import { EmbedBlockConfig } from 'Dante2/package/es/components/blocks/embed.js'
  ...

  uploadHandler = (file, imageBlock)=>{
    // your logic here   
  }

  widgetsConfig = () => {
    return [otherBlocks,
    ImageBlockConfig({
      options: {
        upload_handler: this.uploadHandler,
        image_caption_placeholder: "type a caption (optional)"
      }
    }),


   <DanteEditor 
       ....otherOptions
       widgets={this.props.widgetsConfig()}
   </DanteEditor>


   Dante another example
   --------------------
     # Handle POST-request (Receive data, save the uploaded file and return url of upload image)
  post "/upload_image" do
    name = params['file'][:filename] 
    path = File.join(File.dirname(__FILE__), '/uploads/images', name)
    File.open(path, "wb") do |f|
      f.write(params['file'][:tempfile].read)
    end
    return "/uploads/images/#{name}"
  end

    upload_url: default: /uploads.json
    upload_callback default: empty, allows optional way to handle the server response when image is uploaded This is useful when you don't have control on the backend response.
    image_delete_callback: default: none, returns the image data before deletion. use this if you want to destroy image from the server.
    image_caption_placeholder default: "Type caption for image (optional)"


      //<image-block url="blob:http://localhost:3000/80d2b781-99a4-49c3-8278-ea9bc7cf7f25" width="1200" height="630" loading="true" loading_progress="0" caption="caption!" direction="center" aspect_ratio="{&quot;width&quot;:1000,&quot;height&quot;:525,&quot;ratio&quot;:52.5}"></image-block>
        //await fetch( imageBlock?.img?.currentSrc )
    // .then( result => result.blob())
    //.then( response => { uploadFiles([ response ], question, upload_url, "questions", file?.name,  null )
    //.then( resp => { console.log( resp ); } ); })
    // .catch( error => { throw Error(`  ${error}`); });
        // let file = await fetch(url).then(r => r.blob()).then(blobFile => new File([blobFile], "fileNameGoesHere", { type: "image/png" })). There was a missing 



Redux-Form
------------
import { reducer as formReducer } from 'redux-form';

Swal
----------
Swal.fire({
title: `Please join the following lesson in progress: ${currentUser?.nameOfLessonInProgress}`,
icon: 'warning',
// html: currentUser?.cart?.map((item, index) => '<ul><li key=' + `${index}` + '>' + `${item?.name}` + '</li></ul') + "Do you still want to log out?",
showCancelButton: true,
confirmButtonText: 'Join',
confirmButtonColor: '#673ab7',
cancelButtonText: 'Next time'

MomentJs
-----------
moment( initialEventDateTime )?.local().format('YYYY-MM-DD[T]HH:mm:ss'),

Mongoose / Jest
Mongoose: looks like you're trying to test a Mongoose app with Jest's default jsdom test environment. Please make sure you read Mongoose's docs on configuring Jest to test Node.js apps: http://mongoosejs.com/docs/jest.html

Full Calendar
--------------
Event After Render
----------------
  eventAfterRender: function (event, element, view) {
                    birthday = new Date('<somedate>');
                    year = new Date(event.start).getFullYear();
                    month = new Date(event.start).getMonth();
                    day = new Date(event.start).getDate();
                    alert(year + ' ' + month + ' ' + day);

  
  Media Query Template
  ------------------------
@media (min-width: 1281px) {
  /* CSS */
}
/* 
  ##Device = Laptops, Desktops
  ##Screen = B/w 1025px to 1280px
*/

@media (min-width: 1025px) and (max-width: 1280px) {  
  /* CSS */
}
/* 
  ##Device = Tablets, Ipads (portrait)
  ##Screen = B/w 768px to 1024px
*/
@media (min-width: 768px) and (max-width: 1024px) { 
  /* CSS */ 
}
/* 
  ##Device = Tablets, Ipads (landscape)
  ##Screen = B/w 768px to 1024px
*/

@media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {
  /* CSS */  
}
/* 
  ##Device = Low Resolution Tablets, Mobiles (Landscape)
  ##Screen = B/w 481px to 767px
  @@@ Gets mobile landscape
*/
@media (min-width: 480px) and (max-width: 767px)  {    
  /* CSS */

}
@media  only screen and (min-device-width: 375px) and (max-device-width: 667px) and (orientation:landscape)  {    
  /* CSS */
}
/* 
  ##Device = Most of the Smartphones Mobiles (Portrait)
  ##Screen = B/w 320px to 479px
*/
@media (min-width: 320px) and (max-width: 480px)  {
  /* CSS */
}

Buffer
------------------------------------
// new Buffer(number) // Deprecated 
// Buffer.alloc(number) // New

// new Buffer(string) // Deprecated 
// Buffer.from(string) // New


Browser & Tab Close Events
----------------------------
window.onbeforeunload = function () {
    return "Do you really want to close?";
};


3

FullCalendar alert on event date
When you create your calendar object/function you need to create a eventAfterRender function. This only fires when you have a function that has been placed on the calendar. Then you can read the date and compare it to ones birthday and display popup. I hope that is what your were looking for. I gave a little example.

    $(document).ready(function () {
            $('#calendar').fullCalendar({
                height: 600,
                width: 700,
                header: {
                    right: 'prev,next today',
                    center: 'title',
                    left: 'month,agendaWeek,agendaDay'
                },
                eventAfterRender: function (event, element, view) {
                    birthday = new Date('<somedate>');
                    year = new Date(event.start).getFullYear();
                    month = new Date(event.start).getMonth();
                    day = new Date(event.start).getDate();
                    alert(year + ' ' + month + ' ' + day);
    //do some if statement to see if the year matches then if the month, then the day. 
//if so then go to another function or just put the code here for the pop 

                }
            });
        });

External Css Content - Font
-----------------------------
/* @font-face{
    font-family:'digital-clock-font';
    src: url()
} */

//https://www.freecodecamp.org/news/how-to-add-drag-and-drop-in-react-with-react-beautiful-dnd/
// return( 
//   <DragDropContext onDragEnd={handleOnDragEnd}>
//   <Droppable droppableId="characters">
//     {(provided) => (
//       <ul className="characters" {...provided.droppableProps} ref={provided.innerRef}>
//         {  characters?.map(({id, name, thumb}, index) => { return( <Draggable key={id} draggableId={id} index={index}>
//               {(provided) => (
//                   <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>
//                     { name }
//                   </li>
//                 )}
//            </Draggable> 
//          )} 
//         )} 
//          {provided.placeholder}
//     </ul>
//     )}
//   </Droppable>
// </DragDropContext>
// )

Jitsi Changed a lot of ish with this one.
Jitsi - Install - Latest Updates
https://community.jitsi.org/t/rejoining-for-more-than-one-participent/20917/3
https://www.digitalocean.com/community/tutorials/how-to-install-jitsi-meet-on-ubuntu-20-04

Formfields
------------
// import './style.css';
// I need a toggle field
// I need a digital signature type field
// Report form field answers can be weighted 
//- we would report on this - as well as chart these 
// - profiling response and creating weighted response for review

// use case - find a way to build new exams / quizz from existing question banks/ =<>= also as per discussed today as a milestone after x amount of lessons


Get onlinequestions old-
---------------------------
 // let currentFormQuestions = onlineQuestions?.filter( question => question?.courseId === courseId 
  //   && question?.formType === formType 
  //     && question?.formName === formName );
  //       // && question?.formUuId === formUuId  );


  // let currentCourseQuestionCollection = onlineQuestions?.filter( question => question?.courseId === courseId 
  //                                         && question?.formType === formType 
  //                                           && question?.formName === formName );
  //                                             // && question?.formUuId === formUuId  );

  // let currentCourseQuestions = ( onlineQuestionId === undefined || !onlineQuestionId ) 
  //         ? currentCourseQuestionCollection
  //         : currentCourseQuestionCollection?.filter(question => question?._id === onlineQuestionId);

  //   return currentCourseQuestions;

  Css Centering Items
  ----------------------
  div.container6 {
  height: 10em;
  display: flex;
  align-items: center;
  justify-content: center }
div.container6 p {
  margin: 0 }

  Custom Toggle - css
  ---------------------
  /* .switch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;
}

.switch input { 
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: .4s;
  transition: .4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  -webkit-transition: .4s;
  transition: .4s;
}

input:checked + .slider {
  background-color: #2196F3;
}

input:focus + .slider {
  box-shadow: 0 0 1px #2196F3;
}

input:checked + .slider:before {
  -webkit-transform: translateX(26px);
  -ms-transform: translateX(26px);
  transform: translateX(26px);
}


.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
} */

Hide Scroll Bars
-----------------

/* hide scrollbar but allow scrolling */
element {
    -ms-overflow-style: none; /* for Internet Explorer, Edge */
    scrollbar-width: none; /* for Firefox */
    overflow-y: scroll; 
}

element::-webkit-scrollbar {
    display: none; /* for Chrome, Safari, and Opera */
}


DraftJS modifying blocks and inserting text & latex

export const insertMath = ( props ) => {


    let {
        editorState, 
        setEditorState, 
        mathLatexExpression, 
        mathLatexEditor, 
        setLatexExpression, 
        setMathLatexEditor
    } = props;

    let selection = editorState.getSelection();

    let latexCode = handleMathCreator( mathLatexExpression, setMathLatexEditor, mathLatexEditor );
 
    if ( !latexCode ) return;

    //https://codepen.io/josdea/pen/eBdYpo
    
    let contentState = editorState.getCurrentContent();
    contentState = contentState.createEntity(
        'INLINETEX',
        'IMMUTABLE',
        {
            teX: latexCode,
            displaystyle: true
        }
    );

    const entityKey = contentState.getLastCreatedEntityKey();
    console.log(`logging entity keys ${entityKey}`);
    console.log(entityKey);
    contentState = Modifier.insertText(
        contentState,
        selection,
        '\t\t',
        undefined,
        entityKey
    );

    // const latexEditorState = EditorState.push(editorState, contentState, 'apply-entity'); // here...why here...why now? 
    // const latexEditorState = EditorState.push(editorState, contentState, 'create-entity'); // here...why here...why now? 
    const latexEditorState = EditorState.push(editorState, contentState, 'apply-entity');
    setEditorState( latexEditorState );

    // caption stuff
    if ( latexEditorState ) {

        const currentContent = latexEditorState.getCurrentContent();
        const blockMap = currentContent.getBlockMap();
        const key = blockMap.last().getKey();
        const length = blockMap.last().getLength();
        const newSelection = new SelectionState({
            anchorKey: key,
            anchorOffset: length,
            focusKey: key,
            focusOffset: length,
        });

        //insert text at the selection created above 
        const textWithInsert = Modifier.insertText(currentContent, newSelection, '\n enter caption', null);
        const editorWithInsert = EditorState.push(editorState, textWithInsert, 'insert-characters');

        //also focuses cursor at the end of the editor 
        const newEditorState = EditorState.moveSelectionToEnd(editorWithInsert, textWithInsert.getSelectionAfter());
        setEditorState( newEditorState );
        setLatexExpression( null );

    }

//// mediaBlockRenderer 
    // const currentContent = latexEditorState.getCurrentContent();
    // const textWithEntity = Modifier.splitBlock(currentContent, latexEditorState.getSelection());
    // setEditorState( EditorState.push(latexEditorState, textWithEntity, "split-block") );

//     const blockMap = contentState.getBlockMap();
//     const key = blockMap.last().getKey();
//     const length = blockMap.last().getLength();
//     // const selection = new SelectionState({
//     const latexSelection = new editorState.SelectionState({
//         anchorKey: key,
//         anchorOffset: length,
//         focusKey: key,
//         focusOffset: length,
//       });

//    //insert text at the selection created above 
//     const textWithInsert = Modifier.insertText(contentStateWithEntity, latexSelection, 'text to be inserted', null);
//     const editorWithInsert = EditorState.push(editorState, textWithInsert, 'insert-characters');

//     //also focuses cursor at the end of the editor 
//     const newEditorState = EditorState.moveSelectionToEnd(editorWithInsert, textWithInsert.getSelectionAfter());
//     setEditorState(newEditorState);

};

//    // const latexEditorState = EditorState.push(editorState, contentState, 'apply-entity'); //
    // const latexEditorState = EditorState.push(editorState, contentState, 'create-entity'); // 

    // function addVideoWithVideoPlugin( modifier ){

    //     alert('modifier')
    //     alert(JSON.stringify( modifier ) )
    //     alert(JSON.stringify( modifier( editorState, {src: 'https://www.youtube.com/watch?v=dvgZkm1xWPE' }) ) )

    //     handleEditorState( modifier( editorState, {src: 'https://www.youtube.com/watch?v=dvgZkm1xWPE' }) ); 
    // }

    // const Image = props => {
    //     if (!!props.src) {
    //      return <img src={ props.src } />;
    //     }
    //     return null;
    // };
    
    // const Video = props => {
    //     if (!!props.src) {
    //      return  <video controls src={ props.src } />;
    //     }
    //     return null;
    // };
    
    // const Media = props => {
    //     const entity = props.contentState.getEntity(props.block.getEntityAt(0));
    //     const { src } = entity.getData();
    //     const type = entity.getType();
        
    //     let media;
        
    //     if (type === "image") {
    //      media = <Image src={ src } />;
    //     }
    
    //     // if (type === 'video' ) {
    //     //  media = <Video src={ src } />;
    //     // }
        
    //     return media;
    // };
    
    // const mediaBlockRenderer = block => {

    //     if ( !block ) return;

    //     if ( !Media ) return;

    //     if ( block?.getType() === "atomic" ) {
    //         return {
    //             component: Media,
    //             editable: false
    //         };
    //     }
    //     return null;
    // };

    Draft Alignment
    -----------------
    export const styleMap = {
    'right': {
        'text-align': 'right',
        'display': 'block',
        'width': '-webkit-fill-available'
    },
    'center': {
        'text-align': 'center',
        'display': 'block',
        'width': '-webkit-fill-available'
    },
    'left': {
        'text-align': 'left',
        'display': 'block',
        'width': '-webkit-fill-available'
    },
};

// export function getBlockStyle(block) {
//     switch (block.getType()) {
//      case "blockquote":
//       return "RichEditor-blockquote";
//      default:
//       return null;
//     }
// };

export function getBlockStyle(block) {
    let alignment = alignmentPosition.Left;

    switch (block.getType()) {
     case "blockquote":
      return "RichEditor-blockquote";
     default:
         block.findStyleRanges(( e ) => {
             if ( e.hasStyle( alignmentPosition.Center )) {
                 alignment = alignmentPosition.Center;
             }

             if ( e.hasStyle( alignmentPosition.Right )) {
                alignment = alignmentPosition.Right;
            }
         });
      return `editor-alignment-${alignment}`;
    }
};

Smooth scrolling effect css
------------------------------
<!DOCTYPE html>
<html>
<head>
<style>
html {
  scroll-behavior: smooth;
}

#section1 {
  height: 600px;
  background-color: pink;
}

#section2 {
  height: 600px;
  background-color: yellow;
}
</style>
</head>
<body>

<h1>Smooth Scroll</h1>

<div class="main" id="section1">
  <h2>Section 1</h2>
  <p>Click on the link to see the "smooth" scrolling effect.</p>
  <a href="#section2">Click Me to Smooth Scroll to Section 2 Below</a>
  <p>Note: Remove the scroll-behavior property to remove smooth scrolling.</p>
</div>

<div class="main" id="section2">
  <h2>Section 2</h2>
  <a href="#section1">Click Me to Smooth Scroll to Section 1 Above</a>
</div>

</body>
</html>

// const imageUploadService = () => (file) => {
//   let formData = new FormData();

//   if ( file ) {
//     formData.append('file', file);
//    uploadContent(`${editor_upload_url}${file?.name}`, formData);  
//   }
  
// return new Promise((resolve, reject) => {
//   let counter = 0;
//   const interval = setInterval(() => {
//     counter++;
//     reportProgress(counter * 10);
//     if (counter > 9) {
//       clearInterval(interval);
//       resolve({ url: `http://localhost:3000/files/${file?.name}` });
//     }
//   }, 500);
//  });
// };


if you encounter this error with a create-react-app app, you need to go to the 'react-scripts' webpack config.

node_modules/react_scripts/config/webpack.config.js

under 'resolve':

resolve: {
  ....
  // add the fallback setting below 
  fallback: {
    "fs": false,
    "os": false,
    "path": false
  },
  ....
}
Share
--------------------
/Users/peterimeokparia/Documents/VsCode/Work/Projects/Portal/teach/node_modules/react-scripts/config/webpack.config.js
1.
The way I resolved is to add to the rules section of webpack.config.js
    {
   test: /\.m?js/,
 resolve: {
    fullySpecified: false
 }
},


2.
In addition to that rule I think your resolve section also needs to look like this:
resolve: { extensions: ['.wasm', '.mjs', '.js', '.jsx', '.json'] },

------------------------------
"env": {
    "test": {
      "presets": ["env", "react", "stage-2"],
      "plugins": ["transform-export-extensions"],
      "only": [
        "./**/*.js",
        "node_modules/jest-runtime"
      ]
    }
  }

  Absolute imports / qualified
  Absolute import in React
When initializing React Project with create-react-app, we can configure our React application to support importing modules with absolute paths.

Just open jsconfig.json file (in the root of the project) and add baseUrl setting inside compilerOptions like this:

{
  "compilerOptions": {
    ...,
    "baseUrl": "src"
  },
  "include": ["src"]
}
Note: We can create the jsconfig.json file if it doesn’t exist.

Now we have the working absolute imports setting with src folder as custom base directory.

    resolve: {
      fallback: {
        "fs": false,
        "os": false,
        "path": false,
        "util": false,
        "stream": false,
        "crypto": false
      },


  https://webpack.js.org/concepts/targets/

      // import "draft-js-focus-plugin/lib/plugin.css";
// import "draft-js-image-plugin/lib/plugin.css";
// import "draft-js-alignment-plugin/lib/plugin.css";
//https://github.com/ruial/draft-js-latex-plugin/blob/master/lib/decorator/strategy.js
//https://github.com/facebook/draft-js/issues/1352

// const inlineLatexStrategy = ( contentBlock, callback, contentState ) => {
//     contentBlock.findEntityRanges(( latex ) => {
//         const entityKey = latex.getEntity();
//         if ( !entityKey ) return false;
//         return contentState.getEntity( entityKey ).getType() === 'INLINETEX';
//     }, callback);
// };

// const Decorated = ({ children }) => {
//     return <span style={{ background: "red" }}>{children}</span>;
//   };

// setEditorState( EditorState.set(contentState, createDecorator ) );

destructuring null || undefined objects


const { item } = Object(content)

Share
Improve this answer
Follow
answered Dec 30, 2019 at 13:36
user avatar
Вадик Орлов
29633 silver badges88 bronze badges

    3
    Can you explain this one for clarity? It does work very nicely. – 
    httpete
    Mar 23, 2021 at 11:44
    @httpete it looks like it's creating a new object, and if content is null or undefined you just get an empty object back. – 
    phatskat
    Jun 29, 2021 at 19:12
    Does this work if content was a nested object? – 
    Omar Dulaimi
    Apr 28 at 14:27

Mui-Buttons
-------------
import * as React from 'react';
import Box from '@mui/material/Box';
import Avatar from '@mui/material/Avatar';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import ListItemIcon from '@mui/material/ListItemIcon';
import Divider from '@mui/material/Divider';
import IconButton from '@mui/material/IconButton';
import Typography from '@mui/material/Typography';
import Tooltip from '@mui/material/Tooltip';
import PersonAdd from '@mui/icons-material/PersonAdd';
import Settings from '@mui/icons-material/Settings';
import Logout from '@mui/icons-material/Logout';

export default function AccountMenu() {
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const open = Boolean(anchorEl);
  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  return (
    <React.Fragment>
      <Box sx={{ display: 'flex', alignItems: 'center', textAlign: 'center' }}>
        <Typography sx={{ minWidth: 100 }}>Contact</Typography>
        <Typography sx={{ minWidth: 100 }}>Profile</Typography>
        <Tooltip title="Account settings">
          <IconButton
            onClick={handleClick}
            size="small"
            sx={{ ml: 2 }}
            aria-controls={open ? 'account-menu' : undefined}
            aria-haspopup="true"
            aria-expanded={open ? 'true' : undefined}
          >
            <Avatar sx={{ width: 32, height: 32 }}>M</Avatar>
          </IconButton>
        </Tooltip>
      </Box>
      <Menu
        anchorEl={anchorEl}
        id="account-menu"
        open={open}
        onClose={handleClose}
        onClick={handleClose}
        PaperProps={{
          elevation: 0,
          sx: {
            overflow: 'visible',
            filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',
            mt: 1.5,
            '& .MuiAvatar-root': {
              width: 32,
              height: 32,
              ml: -0.5,
              mr: 1,
            },
            '&:before': {
              content: '""',
              display: 'block',
              position: 'absolute',
              top: 0,
              right: 14,
              width: 10,
              height: 10,
              bgcolor: 'background.paper',
              transform: 'translateY(-50%) rotate(45deg)',
              zIndex: 0,
            },
          },
        }}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
      >
        <MenuItem>
          <Avatar /> Profile
        </MenuItem>
        <MenuItem>
          <Avatar /> My account
        </MenuItem>
        <Divider />
        <MenuItem>
          <ListItemIcon>
            <PersonAdd fontSize="small" />
          </ListItemIcon>
          Add another account
        </MenuItem>
        <MenuItem>
          <ListItemIcon>
            <Settings fontSize="small" />
          </ListItemIcon>
          Settings
        </MenuItem>
        <MenuItem>
          <ListItemIcon>
            <Logout fontSize="small" />
          </ListItemIcon>
          Logout
        </MenuItem>
      </Menu>
    </React.Fragment>
  );
}


Charts

export const dataPieChart1 = ( outcomeInsights ) => {
    let { numberOfQuestionsPassedOutcome, numberOfQuestionsFailedOutcome } = outcomeInsights;
    let data = [ numberOfQuestionsPassedOutcome, numberOfQuestionsFailedOutcome ];
   return {
        height: '500px',
        width: '500px',
        labels: ['Pass', 'Fail'],
        datasets: [
          {
            label: '# of Votes',
            data,
            backgroundColor: [
              'rgb(60, 179, 113)',
              'rgb(255, 0, 0)',
            //   'rgba(75, 192, 192, 0.2)',
            //   'rgba(153, 102, 255, 0.2)',
            //   'rgba(255, 159, 64, 0.2)',
            ],
            borderColor: [
              'rgba(255, 99, 132, 1)',
              'rgba(54, 162, 235, 1)',
              'rgba(255, 206, 86, 1)',
            //   'rgba(75, 192, 192, 1)',
            //   'rgba(153, 102, 255, 1)',
            //   'rgba(255, 159, 64, 1)',
            ],
            borderWidth: 1
          },
        ],
      };
};

export const dataPieChart2 = ( outcomeInsights ) => {
    let { totalNumberOfAttemptedFailedQuestions, numberOfUnAttemptedQuestionsInOutcome } = outcomeInsights;
    let data = [ totalNumberOfAttemptedFailedQuestions, numberOfUnAttemptedQuestionsInOutcome ];
    return {
        height: '300px',
        width: '300px',
        labels: ['Attempted Failed Questions', 'Unattempted Failed Questions'],
        datasets: [
          {
            label: '# of Votes',
            data,
            backgroundColor: [
              'rgb(255, 0, 0)',
              'rgb(255, 95, 31)'
            //   'rgb(210, 210, 210)',
            //   'rgba(75, 192, 192, 0.2)',
            //   'rgba(153, 102, 255, 0.2)',
            //   'rgba(255, 159, 64, 0.2)',
            ],
            borderColor: [
              'rgba(255, 99, 132, 1)',
              'rgba(54, 162, 235, 1)',
              'rgba(255, 206, 86, 1)',
            //   'rgba(75, 192, 192, 1)',
            //   'rgba(153, 102, 255, 1)',
            //   'rgba(255, 159, 64, 1)',
            ],
            borderWidth: 1
          },
        ],
      };
}; 

ChartJS with click Events

import React, { useRef } from 'react';
import { Chart as ChartJS, ArcElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';
import { Chart, Pie, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent } from 'react-chartjs-2';
import { isEmptyObject } from 'services/course/helpers/Validations';
import ChartDataLabels from 'chartjs-plugin-datalabels';
import './style.css';

ChartJS.register(
  ArcElement, 
  Tooltip, 
  Legend, 
  CategoryScale, 
  LinearScale, 
  Title, 
  Tooltip, 
  Legend, 
  ChartDataLabels 
);

const CustomPieChart = ({ data, getOutcomeIdFromChartCallBack }) => {

    if ( isEmptyObject( data ) ) return null;
    
    let { height, width, title } = data;

    const chartRef = useRef( null );

   const options = {
    responsive: true,
    plugins: {
        legend: {
            display: true,
            position: "top",
            align: "start",
            title: {
                display: true,
                color: 'rgb(255, 99, 132)',
            },
            labels: {
                usePointStyle: true,
                color: 'rgb(255,255,255)',
                font: {
                  size: 18
                }
            },
        },
      }
    };

    const printDatasetAtEvent = ( datasetCollection ) => {
        if (!datasetCollection.length) return;
    
        const datasetIndex = datasetCollection[0].datasetIndex;

        getOutcomeIdFromChartCallBack( data.datasets[datasetIndex].label );
      };
    
      const printElementAtEvent = ( element ) => {
        if (!element.length) return;
    
        const { datasetIndex, index } = element[0];

         getOutcomeIdFromChartCallBack( data.labels[index] );
        //  getOutcomeIdFromChartCallBack( data.datasets[datasetIndex].data[index] );
        // alert(data.labels[index], data.datasets[datasetIndex].data[index]);
      };
    
      const printElementsAtEvent = ( elements ) => {
        if (!elements.length) return;

        getOutcomeIdFromChartCallBack( elements.length );
      };
    
      const onClick = (event) => {
        alert('click on')
        const { current: chart } = chartRef;
    
        if (!chart) {
          return;
        }
    
      //printDatasetAtEvent(getDatasetAtEvent(chart, event));
       printElementAtEvent(getElementAtEvent(chart, event));
      //printElementsAtEvent(getElementsAtEvent(chart, event));
      };
      
    return <div className='chart' style={ {height: height, width: width }}>
            <>
            <label>{title}</label> 
            <Chart ref={chartRef} type={'pie'}options={options} data={data} onClick={onClick} />
            </>
            </div>
};
export default CustomPieChart;

react-chartjs-2 chart event methods
import { Chart,  getDatasetAtEvent, getElementAtEvent, getElementsAtEvent } from 'react-chartjs-2';


Craco
if you name craco configuration as craco.config.cjs, does it ease your pain?

https://github.com/dilanx/craco/issues/429
