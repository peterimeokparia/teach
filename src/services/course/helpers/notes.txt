Dante
--------

const content = this.editor.emitSerializedOutput();
this.uploadImagesAndFixUrls(content.blocks, html, id);

private async uploadImagesAndFixUrls(blocks: any[], html: string, postId: string): Promise<string> {
    let fixedHtml = html;

    for (const block of blocks) {
      if (block.type !== 'image') {
        continue;
      }

      const {url} = block.data;

      if (!url.startsWith('blob:')) {
        continue;
      }

      const blob = await fetch(url).then(r => r.blob());

      const uploadFormData = new FormData();
      uploadFormData.append('file', blob);

      const uploadRes = await fetch(`/post/${postId}/image`, {
        method: 'POST',
        body: uploadFormData,
      });

      switch (uploadRes.status) {
        case 200: // OK
          const {url: uploadedUrl} = await uploadRes.json();
          block.data.url = uploadedUrl;
          fixedHtml = fixedHtml.replace(url, uploadedUrl);
          break;
        case 500: // INTERNAL_SERVER_ERROR
          throw new Error();
      }
    }

    return fixedHtml;
  }
@kaloraat
 
Author
kaloraat commented on Sep 2, 2019
@ALEUT
With your code, I am able to do what was almost impossible :)
Thanks heaps!!!

@michelson
 
Owner
michelson commented on Sep 3, 2019
you can use the upload_handler option for the image block in order to override the entire upload behavior with your own logic

  import { EmbedBlockConfig } from 'Dante2/package/es/components/blocks/embed.js'
  ...

  uploadHandler = (file, imageBlock)=>{
    // your logic here   
  }

  widgetsConfig = () => {
    return [otherBlocks,
    ImageBlockConfig({
      options: {
        upload_handler: this.uploadHandler,
        image_caption_placeholder: "type a caption (optional)"
      }
    }),


   <DanteEditor 
       ....otherOptions
       widgets={this.props.widgetsConfig()}
   </DanteEditor>


Redux-Form
------------
import { reducer as formReducer } from 'redux-form';

Swal
----------
Swal.fire({
title: `Please join the following lesson in progress: ${currentUser?.nameOfLessonInProgress}`,
icon: 'warning',
// html: currentUser?.cart?.map((item, index) => '<ul><li key=' + `${index}` + '>' + `${item?.name}` + '</li></ul') + "Do you still want to log out?",
showCancelButton: true,
confirmButtonText: 'Join',
confirmButtonColor: '#673ab7',
cancelButtonText: 'Next time'

MomentJs
-----------
moment( initialEventDateTime )?.local().format('YYYY-MM-DD[T]HH:mm:ss'),

Mongoose / Jest
Mongoose: looks like you're trying to test a Mongoose app with Jest's default jsdom test environment. Please make sure you read Mongoose's docs on configuring Jest to test Node.js apps: http://mongoosejs.com/docs/jest.html

Full Calendar
--------------
Event After Render
----------------
  eventAfterRender: function (event, element, view) {
                    birthday = new Date('<somedate>');
                    year = new Date(event.start).getFullYear();
                    month = new Date(event.start).getMonth();
                    day = new Date(event.start).getDate();
                    alert(year + ' ' + month + ' ' + day);

  
  Media Query Template
  ------------------------
  @media (min-width: 1281px) {
  /* CSS */
}
/* 
  ##Device = Laptops, Desktops
  ##Screen = B/w 1025px to 1280px
*/

@media (min-width: 1025px) and (max-width: 1280px) {  
  /* CSS */
}
/* 
  ##Device = Tablets, Ipads (portrait)
  ##Screen = B/w 768px to 1024px
*/
@media (min-width: 768px) and (max-width: 1024px) { 
  /* CSS */ 
}
/* 
  ##Device = Tablets, Ipads (landscape)
  ##Screen = B/w 768px to 1024px
*/

@media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {
  /* CSS */  
}
/* 
  ##Device = Low Resolution Tablets, Mobiles (Landscape)
  ##Screen = B/w 481px to 767px
  @@@ Gets mobile landscape
*/
@media (min-width: 480px) and (max-width: 767px)  {    
  /* CSS */

}
@media  only screen and (min-device-width: 375px) and (max-device-width: 667px) and (orientation:landscape)  {    
  /* CSS */
}
/* 
  ##Device = Most of the Smartphones Mobiles (Portrait)
  ##Screen = B/w 320px to 479px
*/
@media (min-width: 320px) and (max-width: 480px)  {
  /* CSS */
}

Buffer
------------------------------------
// new Buffer(number) // Deprecated 
// Buffer.alloc(number) // New

// new Buffer(string) // Deprecated 
// Buffer.from(string) // New