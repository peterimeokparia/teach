import 
React, { 
useState, 
useEffect } from "react";

import { 
connect } from 'react-redux';

import {
addNewTimeLine,    
saveTimeLine,
loadTimeLines } from 'Services/course/Actions/TimeLines'; 

import {
getEventsByOperatorId,    
getPushNotificationUsersByOperatorId,
getCalendarEventsByUserIdSelector,     
getOperatorFromOperatorBusinessName, 
getUsersByOperatorId,
getCalendarsByOperatorId,
getTimeLinesByOperatorId } from 'Services/course/Selectors';

import { 
loadAllCalendars } from "Services/course/Actions/Calendar";

import { 
loadAllEvents } from "Services/course/Actions/Event";

import Select from 'react-select';
import Timeline from 'react-calendar-timeline';
import moment from 'moment';
import 'react-calendar-timeline/lib/Timeline.css';
//import './style.css';


const TimeLine2 = ({
calendars,
events,     
addNewTimeLine,
saveTimeLine,    
loadTimeLines,
loadAllEvents,
loadAllCalendars,
timeLines,
calendarEventType,
userId,
operatorBusinessName,
operator,  }) => {

useEffect(( ) => {

    loadTimeLines();
    loadAllCalendars();
    loadAllEvents();
    
},[ loadTimeLines, loadAllCalendars, loadAllEvents  ]);

// let timeLine = timeLines?.find(timeline => timeline?.timeLineName === calendarEventType ),  timeLineItems = null, groupList = null;

// if ( timeLine ) {
//     const [ groups, items ] = Object.values(timeLine);
//     groupList = groups;
//     timeLineItems = items?.map(item => (
//         {...item, start_time: moment( item?.start_time ), end_time: moment( item?.end_time)  }
//     ));
// }

// https://codesandbox.io/s/k0wn41y0o7?file=/CustomTimeline.jsx:3514-3546
// bgColor
// color
// selectedBgColor


let timeLineItems = [];
events.map( event => event.timeLineItems )?.forEach(element => {
    if ( element.length > 0 ) {
        timeLineItems = [ ...timeLineItems, ...element ]
    }
});


let tlines = timeLineItems?.map( tevent => ( { 
     id: tevent?.id,
     group: tevent?.group,
     title: tevent?.title,
     start_time: moment( tevent?.start_time ),
     end_time: moment( tevent?.end_time),
     color: tevent?.color
} ));

let groupList = calendars.map( cal =>  cal.timeLineGroup );

return (
    <> 
     <h2>{`Time Lines`}</h2> 
        <br></br>
        <div className="events">

        {/* <Timeline
                groups={groupList}
                items={tlines}
                defaultTimeStart={moment().add(-12, 'hour')}
                defaultTimeEnd={moment().add(12, 'hour')}
            />
             */}
            {/* <Timeline
                groups={testGroup}
                items={testItems}
                defaultTimeStart={moment().add(-12, 'hour')}
                defaultTimeEnd={moment().add(12, 'hour')}
            /> */}
         
            <br></br>
        </div>
    </>    
)};

const mapDispatch = {
    loadAllCalendars,
    loadAllEvents,
    loadTimeLines,
    saveTimeLine
};

const mapState = ( state, ownProps )  => ({
    operator: getOperatorFromOperatorBusinessName(state, ownProps),
    users: getUsersByOperatorId(state, ownProps),
    user: state?.users?.user,
    calendar: getCalendarEventsByUserIdSelector(state, ownProps),
    calendars: getCalendarsByOperatorId(state, ownProps),
    events: getEventsByOperatorId(state, ownProps),
    pushNotUsers: state?.notifications?.pushNotificationSubscribers,
    pushNotificationSubscribers: getPushNotificationUsersByOperatorId(state, ownProps),
    timeLines: getTimeLinesByOperatorId(state, ownProps)
})

export default connect(mapState, mapDispatch)(TimeLine2);